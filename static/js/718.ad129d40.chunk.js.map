{"version":3,"file":"static/js/718.ad129d40.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/List/List.jsx","components/Card/Card.jsx","components/DragAndDrop/DragAndDropStandAlone.jsx","components/Card/cardwithdraganddrop.jsx","components/Loader/Loader.js","components/SearchInput/SearchInput.jsx","components/Table/DraggableColumnHeader.jsx","components/Table/DraggableCellComponent.jsx","components/Table/Table.jsx","hooks/useBOSWidget.js","hooks/useBOSDropableArea.js","hooks/useDroppableArea.js","hooks/useInterComSearch.js","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/getRouteDetails.js","hooks/usePlantAssignment.js","services/api/PlantAssignment/userGroupService.js","services/api/PlantAssignment/assignedPlantService.js","services/api/PlantAssignment/CADetailService.js","hooks/usePlantDropableArea.js","hooks/useRevisions.js","hooks/useToast.js","services/api/PlantAssignment/allPlantSevice.js","services/api/PlantAssignment/fetchCsrfService.js","services/api/refreshService.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./List.css\";\r\nimport { makeDraggable } from \"../../utils/helpers\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst List = ({ data, isColumn, onDragStart, onDragEnd }) => {\r\n  const titleRef = useRef(null);\r\n  const initialDraggedData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData.initialDraggedData\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (titleRef.current && initialDraggedData) {\r\n      makeDraggable(\r\n        titleRef.current,\r\n        initialDraggedData,\r\n        onDragStart,\r\n        onDragEnd\r\n      );\r\n    }\r\n  }, [data, initialDraggedData, onDragStart, onDragEnd]);\r\n\r\n  if (!data) return null;\r\n\r\n  return (\r\n    <div className={`d-flex ${isColumn ? \"flex-column\" : \"flex-row\"}`}>\r\n      <h5\r\n        ref={titleRef}\r\n        className={`mb-1 text-start title ${!isColumn ? \"me-2\" : \"\"}`}\r\n      >\r\n        {data.title}\r\n      </h5>\r\n      <ul\r\n        className={`list-group d-flex flex-row flex-sm-row flex-wrap justify-content-between pb-3 pb-md-0 ${\r\n          !isColumn ? \"w-75\" : \"\"\r\n        }`}\r\n      >\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ps-0 pb-0 ${\r\n            !isColumn ? \"d-flex flex-row justify-content-around\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p>\r\n            <b>Type:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.type}>\r\n              {data.type}\r\n            </span>\r\n          </p>\r\n          <p>\r\n            <b>Owner:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.owner}>\r\n              {data.owner}\r\n            </span>\r\n          </p>\r\n          {isColumn && (\r\n            <p>\r\n              <b>Maturity State:</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Maturity State\"]}>\r\n                {data[\"Maturity State\"]}\r\n              </span>\r\n            </p>\r\n          )}\r\n        </li>\r\n        {isColumn && (\r\n          <li\r\n            className=\"list-group-item flex-grow-1 text-start mx-0 pt-0\"\r\n            style={{ border: \"0\", paddingLeft: \"0\" }}\r\n          >\r\n            <p>\r\n              <b>Dropped Revision :</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Dropped Revision\"]}>\r\n                {data[\"Dropped Revision\"]}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <b>Latest Released Revision:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Latest Released Revision\"]}\r\n              >\r\n                {data[\"Latest Released Revision\"]}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <b>Collabspace:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Collaborative Space Title\"]}\r\n              >\r\n                {data[\"Collaborative Space Title\"]}\r\n              </span>\r\n            </p>\r\n          </li>\r\n        )}\r\n\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ${\r\n            !isColumn ? \"d-flex flex-row\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\", paddingLeft: \"0\" }}\r\n        >\r\n          {data.type !== \"Document\" && (\r\n            <>\r\n              <p>\r\n                <b>CAD Format:</b>{\" \"}\r\n                <span className=\"list-text\" title={data[\"CAD Format\"]}>\r\n                  {data[\"CAD Format\"]}\r\n                </span>\r\n              </p>\r\n              <p>\r\n                <b>EIN:</b>{\" \"}\r\n                <span className=\"list-text\" title={data.EIN}>\r\n                  {data.EIN}\r\n                </span>\r\n              </p>\r\n            </>\r\n          )}\r\n        </li>\r\n\r\n        <div className=\"d-none d-md-flex align-items-stretch\">\r\n          <div className=\"vr\"></div>\r\n        </div>\r\n\r\n        {/* Horizontal divider after third li on small screens */}\r\n        <div className=\"d-flex d-md-none w-100\">\r\n          <hr className=\"w-100\" />\r\n        </div>\r\n\r\n        <li\r\n          className=\"list-group-item flex-grow-1 text-start mx-0\"\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p className=\"description-container\" title={data.Description}>\r\n            {data.Description}\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useState } from \"react\";\r\nimport \"./Card.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { Image, Card, CardBody } from \"react-bootstrap\";\r\nimport List from \"../List/List\";\r\n\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faAngleUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CardComponent = ({ data, onDragStart, onDragEnd }) => {\r\n  const [isColumn, setIsColumn] = useState(true);\r\n\r\n  const toggleFlexDirection = () => {\r\n    setIsColumn(!isColumn);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"d-flex flex-row mt-4 border-0 \" style={{ width: \"100%\" }}>\r\n      <div className=\"pb-3 d-none d-md-block me-5 ms-4\">\r\n        <Card.Img\r\n          className={`${\r\n            !isColumn ? \"image-resize img-thumbnail\" : \"img-thumbnail\"\r\n          } `}\r\n          src={data.imageURL} // Use dynamic image URL from data\r\n          alt=\"Card image\"\r\n        />\r\n      </div>\r\n      <CardBody className={`${!isColumn ? \"p-0 layout-change\" : \"p-0\"} `}>\r\n        <List\r\n          data={data}\r\n          isColumn={isColumn}\r\n          onDragStart={onDragStart}\r\n          onDragEnd={onDragEnd}\r\n        />\r\n      </CardBody>\r\n      <button\r\n        className=\"me-2 p-0 btn btn-link accordion-toggle\"\r\n        onClick={toggleFlexDirection}\r\n      >\r\n        {/* <FontAwesomeIcon\r\n          icon={faAngleUp}\r\n          size=\"xs\"\r\n          style={{ color: \"#212121\" }}\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        /> */}\r\n\r\n        <Image\r\n          src=\"https://khanfarzan17.github.io/tedting-revision-float/images/arrow.png\"\r\n          alt=\"downArrow\"\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        />\r\n      </button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CardComponent;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropStandAlone = ({ widgetType }) => {\r\n  const plantDroppable = usePlantDropableArea();\r\n  const bosDropable = useBOSDropableArea();\r\n  const defaultDroppable = useDroppableArea();\r\n\r\n  const { initializeDroppableArea } =\r\n    widgetType === \"PlantAssignment\"\r\n      ? plantDroppable\r\n      : widgetType === \"bosWidget\"\r\n      ? bosDropable\r\n      : defaultDroppable;\r\n  const hasInitializedDroppable = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (!hasInitializedDroppable.current) {\r\n      // console.log(\"[DragAndDrop] 🔄 Initializing droppable area...\");\r\n      initializeDroppableArea();\r\n      hasInitializedDroppable.current = true; // ✅ Prevent multiple calls\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropStandAlone;\r\n","import React, { useState } from \"react\";\r\nimport DragAndDropStandAlone from \"../DragAndDrop/DragAndDropStandAlone\";\r\nimport CardComponent from \"./Card\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setCAItemObjectDetails, setDroppedObjectData, setPlantObjectData } from \"../../store/droppedObjectSlice\";\r\n\r\nconst CardWithDragAndDrop = ({ data, widgetType }) => {\r\n  const dispatch = useDispatch();\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const handleDragStart = () => {\r\n    // console.log(\"handleDragStart called\");\r\n    setIsDragging(true);\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n  \r\n  \r\n  };\r\n\r\n  const handleDragEnd = () => {\r\n    // console.log(\"handleDragEnd called\");\r\n    // console.log(\"Before setIsDragging(false) - isDragging:\", isDragging);\r\n    setIsDragging(false);\r\n    // console.log(\"After setIsDragging(false) - isDragging:\", isDragging);\r\n  };\r\n  return (\r\n    <div className={`card-with-drag-and-drop ${isDragging ? \"dragging\" : \"\"}`}>\r\n      <DragAndDropStandAlone widgetType={widgetType} />\r\n      <CardComponent\r\n        data={data}\r\n        onDragStart={handleDragStart}\r\n        onDragEnd={handleDragEnd}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardWithDragAndDrop;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport \"./SearchInput.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SearchInput = ({ onSearch, disabled }) => {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const handleInputChange = (event) => {\r\n    const newSearchText = event.target.value;\r\n    setSearchText(newSearchText);\r\n  };\r\n\r\n  const handleInputKeyPress = (event) => {\r\n    if (event.key === \"Enter\" && searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setSearchText(\"\");\r\n    inputRef.current.focus(); // Keep focus on the input after clearing\r\n  };\r\n  const handleSearchIconClick = () => {\r\n    if (searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-content-container d-flex align-items-center\">\r\n      <FontAwesomeIcon\r\n        icon={faMagnifyingGlass}\r\n        onClick={handleSearchIconClick}\r\n        className=\"search-icon\"\r\n      />\r\n\r\n      <span className=\"ms-4 drag-and-drop-text flex-grow-1\">\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            ref={inputRef}\r\n            value={searchText}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleInputKeyPress}\r\n            placeholder=\"Search...\"\r\n            disabled={disabled}\r\n          />\r\n          {searchText && (\r\n            <Button\r\n              variant=\"btn-link\"\r\n              onClick={handleClearClick}\r\n              className=\"clear-button\"\r\n            >\r\n              ✖\r\n            </Button>\r\n          )}\r\n        </InputGroup>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableColumnHeader = ({ header, columns, table }) => {\r\n  const isFixed = header.column.id === \"selection\";\r\n  const isPinned = table\r\n    .getState()\r\n    .columnPinning.left.includes(header.column.id);\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const sortable = useSortable({\r\n    id: header.column.id,\r\n    disabled: header.column.id === \"selection\" || header.column.id === \"EIN\",\r\n  });\r\n\r\n  const { attributes, listeners, setNodeRef, transform, isDragging } = isFixed\r\n    ? {\r\n        attributes: {},\r\n        listeners: {},\r\n        setNodeRef: null,\r\n        transform: null,\r\n        isDragging: false,\r\n      }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: \"sticky\",\r\n    top: 0,\r\n    left: isFixed ? 0 : isPinned ? \"var(--pinned-left)\" : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: header.getSize(),\r\n    zIndex: isFixed ? 5 : isPinned ? 4 : 3,\r\n    cursor: isFixed ? \"default\" : \"move\",\r\n    backgroundColor: \"#f2f2f2\",\r\n  };\r\n\r\n  return (\r\n    <th\r\n      ref={setNodeRef}\r\n      style={style}\r\n      data-fixed={isFixed}\r\n      data-pinned={isPinned}\r\n      className={className}\r\n    >\r\n      <div\r\n        className=\"d-flex align-items-center header-content\"\r\n        {...(!isFixed ? { ...attributes, ...listeners } : {})}\r\n      >\r\n        <div\r\n          className=\"flex-grow-1\"\r\n          onClick={header.column.getToggleSortingHandler()}\r\n        >\r\n          {header.isPlaceholder\r\n            ? null\r\n            : flexRender(header.column.columnDef.header, header.getContext())}\r\n          {header.column.getIsSorted() === \"asc\" ? (\r\n            <span className=\"icon\">↑</span>\r\n          ) : header.column.getIsSorted() === \"desc\" ? (\r\n            <span className=\"icon\">↓</span>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        {...{\r\n          onDoubleClick: () => header.column.resetSize(),\r\n          onMouseDown: header.getResizeHandler(),\r\n          onTouchStart: header.getResizeHandler(),\r\n          className: `Resizer ${\r\n            header.column.getIsResizing() ? \"isResizing\" : \"\"\r\n          }`,\r\n        }}\r\n      />\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default DraggableColumnHeader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableCell = ({ cell, columns, changedCells }) => {\r\n  const isFixed = cell.column.id === \"selection\";\r\n  const isPinned = cell.column.getIsPinned();\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const cellContent = flexRender(cell.column.columnDef.cell, cell.getContext());\r\n  // Extract only the column name (remove row index prefix like '0_')\r\n  const columnName =\r\n    cell.column.id.split(\"_\").slice(1).join(\"_\") || cell.column.id;\r\n  const isChanged = changedCells?.[columnName];\r\n  const sortable = useSortable({\r\n    id: cell.column.id,\r\n    disabled: isFixed,\r\n  });\r\n\r\n  const { setNodeRef, transform, isDragging } = isFixed\r\n    ? { setNodeRef: null, transform: null, isDragging: false }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: isFixed || isPinned ? \"sticky\" : \"relative\",\r\n    left: isFixed ? 0 : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: cell.column.getSize(),\r\n    zIndex: isFixed ? 2 : isDragging ? 1 : isPinned ? 2 : 0,\r\n  };\r\n\r\n  return (\r\n    <td\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={className}\r\n      title={isFixed ? \"\" : `${cell.getValue()}`}\r\n    >\r\n      {isFixed ? (\r\n        cellContent\r\n      ) : (\r\n        <div\r\n          className=\"cell-content\"\r\n          style={{\r\n            color: isChanged ? \"red\" : \"inherit\",\r\n            fontWeight: isChanged ? \"bold\" : \"normal\",\r\n          }}\r\n        >\r\n          {cellContent}\r\n          <style>\r\n            {`\r\n        .cell-content select {\r\n          color: ${isChanged ? \"red\" : \"inherit\"} !important;\r\n          font-weight: ${isChanged ? \"bold\" : \"normal\"} !important;\r\n        }\r\n      `}\r\n          </style>\r\n        </div>\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default DraggableCell;\r\n","import React, { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n} from \"@tanstack/react-table\";\r\nimport {\r\n  DndContext,\r\n  KeyboardSensor,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  closestCenter,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport { restrictToHorizontalAxis } from \"@dnd-kit/modifiers\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  horizontalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./Table.css\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport { getRowRange } from \"../../utils/helpers\";\r\nimport DraggableColumnHeader from \"./DraggableColumnHeader\";\r\nimport DraggableCell from \"./DraggableCellComponent\";\r\n\r\n// Add this utility  function to get the storage key based on the widget type\r\nconst getWidgetStorageKey = (widgetType) => {\r\n  console.log(\"Widget Type:\", widgetType);\r\n  if (!widgetType) {\r\n    console.warn(\"Widget type is missing, using default key\");\r\n    return \"tableColumnOrder_default\";\r\n  }\r\n  return `tableColumnOrder_${widgetType}`;\r\n};\r\n\r\nconst ReusableTable = ({\r\n  columns,\r\n  data,\r\n  editable = false,\r\n  meta,\r\n  type,\r\n  widgetType,\r\n  latestRevision,\r\n  droppedRevision,\r\n  onSelectableRowsChange,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [tableData, setTableData] = useState(data);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [lastSelectedId, setLastSelectedId] = useState(null); // Track last clicked row\r\n  const tableRef = useRef(null);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n    \r\n  useEffect(() => {\r\n    const handleScroll = (e) => {\r\n      setIsScrolled(e.target.scrollTop > 0);\r\n    };\r\n\r\n    const tableContainer = tableRef.current;\r\n    if (tableContainer) {\r\n      tableContainer.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (tableContainer) {\r\n        tableContainer.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  if (widgetType !== \"Revision_FLoat_Widget\" && widgetType !== \"Plant_Assignment_Widget\") {\r\n    var { updateTableData } = meta; // Need to work on this\r\n  }\r\n\r\n  // Modified columnOrder initialization\r\n  const [columnOrder, setColumnOrder] = useState(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    const storedOrder = localStorage.getItem(storageKey);\r\n\r\n    if (storedOrder) {\r\n      try {\r\n        const parsed = JSON.parse(storedOrder);\r\n        // Validate stored columns match current columns\r\n        const isValid = parsed.every(\r\n          (colId) =>\r\n            colId === \"selection\" ||\r\n            columns.some((col) => (col.id || col.accessorKey) === colId)\r\n        );\r\n        if (isValid) return parsed;\r\n      } catch (error) {\r\n        console.error(`Failed to parse column order for ${widgetType}:`, error);\r\n      }\r\n    }\r\n\r\n    // Default order if nothing in localStorage or invalid data\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  });\r\n\r\n  // Update localStorage with widget-specific key\r\n  useEffect(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.setItem(storageKey, JSON.stringify(columnOrder));\r\n  }, [columnOrder, widgetType]);\r\n\r\n  console.log(\"Column Order:\", columnOrder);\r\n\r\n  // Store default column order for reset functionality\r\n  const defaultColumnOrder = useMemo(() => {\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  }, [columns]);\r\n\r\n  // Modified reset columns handler\r\n  const handleResetColumns = () => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.removeItem(storageKey);\r\n    setColumnOrder(defaultColumnOrder);\r\n    // console.log(\"Reset columns clicked\", defaultColumnOrder);\r\n  };\r\n\r\n  const handleEditCell = (rowIndex, columnId, value) => {\r\n    const updatedData = tableData.map((row, index) =>\r\n      index === rowIndex ? { ...row, [columnId]: value } : row\r\n    );\r\n    console.log(\"[Table] Updated Table Data:\", updatedData);\r\n\r\n    // Call the meta function to update external data if needed\r\n    if (meta?.updateTableData) {\r\n      meta.updateTableData(updatedData);\r\n    }\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  // Initialize columnPinning based on column definitions\r\n  const initialColumnPinning = useMemo(() => {\r\n    const pinnedColumns = { left: [\"selection\", \"EIN \"] };\r\n    columns.forEach((column) => {\r\n      if (column.columnPinning) {\r\n        pinnedColumns.left.push(column.id || column.accessorKey);\r\n      }\r\n    });\r\n    return pinnedColumns;\r\n  }, [columns]);\r\n\r\n  // Enhance columns for editable functionality and add checkbox selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"selection\",\r\n      header: ({ table }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          ref={(el) => {\r\n            if (el) {\r\n              el.indeterminate = table.getIsSomeRowsSelected();\r\n            }\r\n          }}\r\n          checked={table.getIsAllRowsSelected()}\r\n          onChange={table.getToggleAllRowsSelectedHandler()}\r\n        />\r\n      ),\r\n      cell: ({ row }) => {\r\n        const isSelectable = enableRowSelection(row.original); // Get row's selectability status\r\n\r\n        return (\r\n          <input\r\n            type=\"checkbox\"\r\n            disabled={!isSelectable} // Disable non-selectable rows\r\n            style={{\r\n              cursor: isSelectable ? \"pointer\" : \"not-allowed\", // Block cursor for non-selectable rows\r\n              opacity: isSelectable ? 1 : 0.5, // Make disabled checkboxes faded\r\n            }}\r\n            {...{\r\n              checked: row.getIsSelected(),\r\n              onChange: row.getToggleSelectedHandler(),\r\n            }}\r\n          />\r\n        );\r\n      },\r\n    };\r\n\r\n    const baseColumns = editable\r\n      ? columns.map((column) => ({\r\n          ...column,\r\n          cell: column.editable\r\n            ? ({ row, getValue }) => (\r\n                <input\r\n                  className=\"input-cell\"\r\n                  value={getValue()}\r\n                  onChange={(e) =>\r\n                    handleEditCell(\r\n                      row.index,\r\n                      column.accessorKey,\r\n                      e.target.value\r\n                    )\r\n                  }\r\n                />\r\n              )\r\n            : column.cell,\r\n        }))\r\n      : columns;\r\n\r\n    return [selectionColumn, ...baseColumns];\r\n  }, [columns, editable]);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor, {\r\n      activationConstraint: {\r\n        distance: 8,\r\n      },\r\n    }),\r\n    useSensor(TouchSensor, {\r\n      activationConstraint: {\r\n        delay: 200,\r\n        tolerance: 5,\r\n      },\r\n    }),\r\n    useSensor(KeyboardSensor, {})\r\n  );\r\n\r\n  // Jatin added this for testing, if needs to change and make it work in the parent component, then will change this.\r\n  useEffect(() => {\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      const selectableRows = tableData.filter(enableRowSelection);\r\n      onSelectableRowsChange(selectableRows); // Notify parent\r\n    }\r\n  }, [widgetType, tableData, onSelectableRowsChange]);\r\n\r\n  // Modified handleDragEnd to save to localStorage\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (active && over && active.id !== over.id) {\r\n      if (active.id !== \"selection\" && active.id !== \"EIN\") {\r\n        setColumnOrder((prevOrder) => {\r\n          const oldIndex = prevOrder.indexOf(active.id);\r\n          const newIndex = prevOrder.indexOf(over.id);\r\n          const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\r\n          return newOrder;\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const enableRowSelection = (row) => {\r\n    if (widgetType === \"Bos_Attribute_Widget\" && type === \"Document\") {\r\n      return row.IsLatest === \"TRUE\";\r\n    }\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      return !latestRevision || latestRevision === droppedRevision;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const table = useReactTable({\r\n    data: tableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n      columnOrder,\r\n      columnPinning: initialColumnPinning,\r\n    },\r\n    onRowSelectionChange: setRowSelection,\r\n    onColumnOrderChange: setColumnOrder,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n\r\n    // Earlier it was\r\n    //  enableRowSelection: true,\r\n\r\n    enableRowSelection: (row) => enableRowSelection(row.original),\r\n\r\n    defaultColumn: {\r\n      size: 170,\r\n      minSize: 50,\r\n      maxSize: 500,\r\n    },\r\n    columnResizeMode: \"onChange\",\r\n    meta: {\r\n      updateTableData, // Added this to the meta field to allow columns to update the table data\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get selected row data using table.getSelectedRowModel()\r\n    const selectedRows = table\r\n      .getSelectedRowModel()\r\n      .flatRows.map((row) => row.original);\r\n    // console.log(\"Selected Rows (TanStack Table):\", selectedRows);\r\n    dispatch(setSelectedTableRows(selectedRows)); // Update Redux store\r\n  }, [rowSelection, dispatch]); // Update when rowSelection changes\r\n\r\n  const columnSizeVars = useMemo(() => {\r\n    const headers = table.getFlatHeaders();\r\n    const colSizes = {};\r\n    console.log(\"table.getTotalSize()\", table.getTotalSize());\r\n    for (let i = 0; i < headers.length; i++) {\r\n      const header = headers[i];\r\n      colSizes[`--header-${header.id}-size`] = header.getSize();\r\n      colSizes[`--col-${header.column.id}-size`] = header.column.getSize();\r\n    }\r\n    return colSizes;\r\n  }, [table.getState().columnSizingInfo, table.getState().columnSizing]);\r\n\r\n  const handleSelectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: true },\r\n    });\r\n  };\r\n\r\n  const handleDeselectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: false },\r\n    });\r\n  };\r\n\r\n  const handleExport = () => {\r\n    console.log(\"Export button clicked\");\r\n    console.log(\"Widget Type in handleExport:\", widgetType); // ADD THIS LINE\r\n    if (widgetType === \"Revision_FLoat_Widget\") {\r\n      console.log(\"Exporting for Revision_FLoat_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Where Used Details.xlsx\");\r\n    } else if (widgetType === \"Plant_Assignment_Widget\") {\r\n      console.log(\"Exporting for Plant_Assignment_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"EAN_Manufacturing.xlsx\");\r\n    } else if (widgetType === \"Bos_Attribute_Widget\") {\r\n      console.log(\"Exporting for Bos_Attribute_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Bos_Attribute_Widget.xlsx\");\r\n    } else {\r\n      console.log(\r\n        \"Exporting with default filename for widgetType:\",\r\n        widgetType\r\n      ); // ADD THIS LINE\r\n      handleExportExcel(data, \"table-data.xlsx\"); // Default case\r\n    }\r\n  };\r\n\r\n  const handleRowClick = (row, event) => {\r\n    const { rows, rowsById } = table.getRowModel();\r\n    if (event.shiftKey && lastSelectedId) {\r\n      try {\r\n        const rowsToToggle = getRowRange(rows, row.id, lastSelectedId);\r\n        const isLastSelected = rowsById[lastSelectedId].getIsSelected();\r\n        rowsToToggle.forEach((r) => r.toggleSelected(isLastSelected));\r\n      } catch (e) {\r\n        console.error(\"Multi-select with shift+click failed:\", e);\r\n      }\r\n    } else {\r\n      row.toggleSelected(!row.getIsSelected());\r\n    }\r\n    setLastSelectedId(row.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"toolkit my-3\">\r\n        <div className=\"d-flex justify-content-end button-container\">\r\n          <div className=\"d-flex\">\r\n            <CustomButton\r\n              variant=\"outline-primary\"\r\n              size=\"lg\"\r\n              onClick={handleSelectAll}\r\n              className=\"m-2\"\r\n              text=\"Select All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-secondary\"\r\n              size=\"lg\"\r\n              onClick={handleDeselectAll}\r\n              className=\"m-2\"\r\n              text=\"Deselect  All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-success\"\r\n              size=\"lg\"\r\n              onClick={handleExport}\r\n              className=\"m-2 border-bottom-10px\"\r\n              text=\"Export to CSV \"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-warning\"\r\n              size=\"lg\"\r\n              onClick={handleResetColumns}\r\n              className=\"m-2\"\r\n              text=\"Reset Columns\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"table-info\">\r\n        <p>{tableData.length} Items</p>\r\n      </div>\r\n      <DndContext\r\n        sensors={sensors}\r\n        collisionDetection={closestCenter}\r\n        modifiers={[restrictToHorizontalAxis]}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        <div\r\n          ref={tableRef}\r\n          className={`table-responsive ${isScrolled ? \"is-scrolled\" : \"\"}`}\r\n        >\r\n          <table\r\n            className=\"table custom-table table-hover\"\r\n            style={{\r\n              ...columnSizeVars,\r\n              width: table.getTotalSize(),\r\n            }}\r\n          >\r\n            <thead>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <tr key={headerGroup.id}>\r\n                  <SortableContext\r\n                    items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                    strategy={horizontalListSortingStrategy}\r\n                  >\r\n                    {headerGroup.headers.map((header) => (\r\n                      <DraggableColumnHeader\r\n                        key={header.id}\r\n                        header={header}\r\n                        columns={columns}\r\n                        table={table}\r\n                      />\r\n                    ))}\r\n                  </SortableContext>\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n\r\n            <tbody>\r\n              {table.getRowModel().rows.length > 0 ? (\r\n                table.getRowModel().rows.map((row) => (\r\n                  <tr\r\n                    key={row.id}\r\n                    onClick={(event) => handleRowClick(row, event)}\r\n                    className={rowSelection[row.id] ? \"row-selected\" : \"\"}\r\n                  >\r\n                    <SortableContext\r\n                      items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                      strategy={horizontalListSortingStrategy}\r\n                    >\r\n                      {row.getVisibleCells().map((cell) => (\r\n                        <DraggableCell\r\n                          key={cell.id}\r\n                          cell={cell}\r\n                          columns={columns}\r\n                          changedCells={row.original.changedCells} // Pass changed cells info\r\n                        />\r\n                      ))}\r\n                    </SortableContext>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td\r\n                    colSpan={table.getHeaderGroups()[0].headers.length}\r\n                    className=\"no-data p-2\"\r\n                  >\r\n                    No Table Data\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </DndContext>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReusableTable;\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  setParentDetailsLoading,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\n\r\nconst useBOSWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in useBOSWidget:\", email);\r\n  // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n  const handleBOSWidget = async (\r\n    collabSpace,\r\n    state,\r\n    objectId,\r\n    type,\r\n    parentName,\r\n    parentRevision\r\n  ) => {\r\n    try {\r\n      console.log(\"Object id is:\", objectId);\r\n      console.log(\"Object type is:\", type);\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"[useBOSWidget] CSRF Headers:\", headers);\r\n\r\n      // Step 1: Call Enovia Web Service\r\n      let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/documents/parentId/${objectId}?parentRelName=SpecificationDocument`;\r\n\r\n      let parentDirection = type === \"Document\" ? \"to\" : \"from\";\r\n\r\n      let urlObjWAF = `${baseURL}&parentDirection=${parentDirection}`;\r\n      let ChildObject = await callEnoviaWebService(\r\n        \"GET\",\r\n        urlObjWAF,\r\n        \"\",\r\n        headers\r\n      );\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n\r\n      if (\r\n        ChildObject &&\r\n        ChildObject.status &&\r\n        ChildObject.output.data.length > 0\r\n      ) {\r\n        let ChildObjectDocument = ChildObject.output.data.map((sSpec) => ({\r\n          id: sSpec.id,\r\n          title:\r\n            sSpec.dataelements.title && sSpec.dataelements.title.trim() !== \"\"\r\n              ? sSpec.dataelements.title\r\n              : sSpec.dataelements.secondaryTitle,\r\n          revision: sSpec.dataelements.revision,\r\n          state: sSpec.dataelements.stateNLS,\r\n          name: sSpec.dataelements.name,\r\n        }));\r\n\r\n        console.log(\r\n          \"[useBOSWidget] Extracted Spec Documents:\",\r\n          ChildObjectDocument\r\n        );\r\n        // if type is Document and then iterate ovet the\r\n        if (type === \"Document\") {\r\n          const revisionBody = {\r\n            data: [],\r\n          };\r\n          ChildObjectDocument.forEach((child) => {\r\n            const body = {\r\n              id: child.id,\r\n              identifier: child.id,\r\n              type: \"VPMReference\",\r\n              source: `${ENOVIA_BASE_URL}`,\r\n              relativePath: `/resources/v1/modeler/dseng/dseng:EngItem/${child.id}`,\r\n            };\r\n            revisionBody.data.push(body);\r\n          });\r\n          const RevisionUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n          const response = await callEnoviaWebService(\r\n            \"POST\",\r\n            RevisionUrl,\r\n            revisionBody,\r\n            headers\r\n          );\r\n          console.log(\"response is:\", response);\r\n          response.output.results.forEach((item) => {\r\n            // Find the latest version based on the 'revision' key\r\n            const latestVersion = item.versions.reduce((latest, current) => {\r\n              return convertRevisionToNumber(current.revision) >\r\n                convertRevisionToNumber(latest.revision)\r\n                ? current\r\n                : latest;\r\n            });\r\n\r\n            // Update 'isLatestRevision' for only the matching document\r\n            ChildObjectDocument = ChildObjectDocument.map((doc) => {\r\n              if (item.versions.some((version) => version.id === doc.id)) {\r\n                return {\r\n                  ...doc,\r\n                  isLatestRevision:\r\n                    doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n                };\r\n              }\r\n              return doc;\r\n            });\r\n          });\r\n\r\n          // Function to convert revision to a comparable numeric value\r\n          function convertRevisionToNumber(rev) {\r\n            if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n            let number = 0;\r\n            for (let i = 0; i < rev.length; i++) {\r\n              number =\r\n                number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n            }\r\n            return number; // Handles A-Z, AA-ZZ revisions\r\n          }\r\n\r\n          console.log(\"ChildObjectDocument is:\", ChildObjectDocument);\r\n        }\r\n        let requestBody;\r\n        let getUrl;\r\n        if (type === \"Document\") {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestSpecItemDetails\";\r\n          requestBody = {\r\n            SpecName: parentName, // Replace with actual SpecName if dynamic\r\n            SpecRevision: parentRevision, // Replace with actual SpecRevision if dynamic\r\n            Items: ChildObjectDocument.map((obj) => ({\r\n              ItemName: obj.name, // Replace dynamically if needed\r\n              ItemRevision: obj.revision,\r\n            })),\r\n          };\r\n        } else {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestItemSpecDetails\";\r\n          requestBody = {\r\n            ItemName: parentName, // Replace with actual ItemName if dynamic\r\n            ItemRevision: parentRevision, // Replace with actual revision if dynamic\r\n            Specifications: ChildObjectDocument.map((obj) => ({\r\n              SpecName: obj.name,\r\n              SpecRevision: obj.revision,\r\n            })),\r\n          };\r\n        }\r\n\r\n        console.log(\"Requested Body is:\", requestBody);\r\n\r\n        const response = await fetchData(\"POST\", getUrl, requestBody);\r\n\r\n        console.log(\"the response from node API is:\", response);\r\n\r\n        let mergedData = [];\r\n        if (response?.data?.data?.Specifications) {\r\n          // **Case 1: API Response Contains \"Specifications\"**\r\n          response.data.data.Specifications.forEach((spec) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (obj) =>\r\n                obj.name === spec.SpecName && obj.revision === spec.SpecRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              childName: spec.SpecName,\r\n              childRevision: spec.SpecRevision,\r\n              PrintOnPurchaseOrderRequired: spec.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: spec.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: spec.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: spec.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": spec[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else if (response?.data?.data?.Items) {\r\n          // get all the id's\r\n\r\n          // **Case 2: API Response Contains \"Items\"**\r\n          response.data.data.Items.forEach((item) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (doc) =>\r\n                doc.name === item.ItemName && doc.revision === item.ItemRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childName: item.ItemName,\r\n              childRevision: item.ItemRevision,\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              PrintOnPurchaseOrderRequired: item.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: item.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: item.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: item.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": item[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else {\r\n          console.warn(\"[useBOSWidget] Unexpected API response format.\");\r\n        }\r\n        console.log(\r\n          \"[useBOSWidget] Final Merged Data for Dispatch:\",\r\n          mergedData\r\n        );\r\n\r\n        dispatch(setSpecDocument(mergedData));\r\n        // You can now dispatch or return this data as needed\r\n      } else {\r\n        console.warn(\"[useBOSWidget] No connected childs.\");\r\n        dispatch(setSpecDocument([]));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useBOSWidget] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  return { handleBOSWidget };\r\n};\r\n\r\nexport default useBOSWidget;\r\n\r\n// response.output.results.forEach((item) => {\r\n//   // Find the latest version based on the 'revision' key\r\n//   const latestVersion = item.versions.reduce((latest, current) => {\r\n//     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n//       ? current\r\n//       : latest;\r\n//   });\r\n\r\n//   // Update 'isLatestRevision' for each document\r\n//   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n//     ...doc,\r\n//     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n//   }));\r\n// });\r\n\r\n// // Function to convert revision to a comparable numeric value\r\n// function convertRevisionToNumber(rev) {\r\n//   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n//   let number = 0;\r\n//   for (let i = 0; i < rev.length; i++) {\r\n//     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n//   }\r\n//   return number; // Handles A-Z, AA-ZZ revisions\r\n// }\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setDroppedObjectData } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport useBOSWidget from \"./useBOSWidget\";\r\n\r\nconst useBOSDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleBOSWidget } = useBOSWidget();\r\n\r\n  // const [csrfHeaders, setCsrfHeaders] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleBOSWidget(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              draggedObjectData.Name,\r\n              draggedObjectData[\"Dropped Revision\"]\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [dispatch, handleBOSWidget]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      setLoading(true); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    dispatch(setIsDroppedAction(false));\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useBOSDropableArea;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction, setLoading } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useRevisions from \"./useRevisions\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useDroppableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { fetchRevisionsAndParents } = useRevisions();\r\n  const dispatch = useDispatch();\r\n  // ✅ Use `useSelector` to get the latest values from Redux\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Fetch Revisions and Parents in parallel\r\n          const relativePath = objectDetailsResult.data.cardData.relativePath;\r\n          const [revisionParentData] = await Promise.all([\r\n            fetchRevisionsAndParents(\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              relativePath\r\n            ),\r\n          ]);\r\n          // Dispatch all updates together (batching updates)\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n              parentDetails: revisionParentData || [],\r\n            })\r\n          );\r\n          console.log(\"[fetchObjectDetails] ✅ Redux store updated.\");\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        console.log(\"[fetchObjectDetails] 🏁 Ensuring loading is reset.\");\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, fetchRevisionsAndParents, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\"VPMReference\", \"Document\", \"Raw_Material\"];\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useDroppableArea;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { loadInterCom } from \"../utils/helpers\";\r\n\r\nconst useInterComSearch = () => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [InterCom, setInterCom] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        // console.log(\"[useInterComSearch] Loading InterCom module\");\r\n        const interComInstance = await loadInterCom();\r\n        setInterCom(interComInstance);\r\n      } catch (error) {\r\n        console.error(\r\n          \"[useInterComSearch] Error initializing InterCom:\",\r\n          error\r\n        );\r\n      }\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.disconnect();\r\n        // console.log(\"[useInterComSearch] Socket disconnected\");\r\n      }\r\n    };\r\n  }, [socket]);\r\n\r\n  const performSearch = useCallback(\r\n    (searchText, searchOpts, onObjectsSelected) => {\r\n      // Check if InterCom is loaded\r\n      if (!InterCom) {\r\n        console.warn(\"[useInterComSearch] InterCom is not loaded yet.\");\r\n        return;\r\n      }\r\n\r\n      const socketName =\r\n        \"socket\" + new Date().toISOString().replace(/[-:]/g, \"\");\r\n      const newSocket = new InterCom.Socket(socketName, {\r\n        dispatchRetryInternal: 0,\r\n      });\r\n      newSocket.subscribeServer(\"SearchComServer\");\r\n      setSocket(newSocket);\r\n\r\n      console.log(\r\n        \"[useInterComSearch] performSearch called with:\",\r\n        searchText,\r\n        searchOpts\r\n      );\r\n\r\n      const widgetId = window.widget?.id;\r\n      // console.log(\"[useInterComSearch] widget id:\", widgetId);\r\n\r\n      const finalSearchOpts = {\r\n        ...searchOpts,\r\n        widget_id: widgetId,\r\n        app_socket_id: socketName,\r\n        default_search_criteria: searchText,\r\n      };\r\n\r\n      // Register the search context (if needed)\r\n      console.log(\r\n        \"[useInterComSearch] Dispatching RegisterContext event with:\",\r\n        finalSearchOpts\r\n      );\r\n      newSocket.dispatchEvent(\"RegisterContext\", finalSearchOpts);\r\n\r\n      // Dispatch the search event\r\n      // console.log(\r\n      //   \"[useInterComSearch] Dispatching InContextSearch event with:\",\r\n      //   finalSearchOpts\r\n      // );\r\n      newSocket.dispatchEvent(\"InContextSearch\", finalSearchOpts);\r\n\r\n      // Add a listener for search results\r\n      const handleSearchResults = (data) => {\r\n        console.log(\"[useInterComSearch] Search results received:\", data);\r\n        if (onObjectsSelected) {\r\n          onObjectsSelected(data);\r\n        }\r\n      };\r\n\r\n      console.log(\r\n        \"[useInterComSearch] Adding listener for Selected_Objects_search\"\r\n      );\r\n      newSocket.addListener(\"Selected_Objects_search\", handleSearchResults);\r\n    },\r\n    [InterCom]\r\n  );\r\n\r\n  return {\r\n    performSearch,\r\n  };\r\n};\r\n\r\nexport default useInterComSearch;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  let urlObjWAF =\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/`;\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n \r\nexport const GetFlowDownCADetails = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n \r\n  try {\r\n    const WAFData = await loadWAFData();\r\n \r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n \r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/search?searchStr=${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const routeData = (searchResponse?.data || []).find(item => item.type === \"Route\");\r\n \r\n    if (routeData) {\r\n        const RouteID = routeData.identifier;\r\n        const RouteStatus = routeData.state;\r\n        const RouteURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/${RouteID}`;\r\n        const RouteDetails = await fetchData(RouteURL);\r\n        const ChangeData = (RouteDetails?.data || []).find(item => item.type === \"Change Action\");\r\n        if(ChangeData){\r\n            const MFGCAID = ChangeData.identifier;\r\n            const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n            const CAresponse = await fetchData(CAUrl);\r\n            if (CAresponse) {\r\n                for (const item of CAresponse.isFlowDownOf || []) {\r\n                  if (item.type === \"Change Action\") {\r\n                    const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n                    const EngCAResponse = await fetchData(EngCAUrl);\r\n                    if (EngCAResponse) {\r\n                        CADetails.CAAtt.push({\r\n                          CATitle: EngCAResponse.title,\r\n                          CAState: EngCAResponse.state,\r\n                        });\r\n                      }\r\n                  }\r\n                }\r\n            }\r\n        }\r\n        CADetails[\"MCOState\"] = RouteStatus;\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }    \r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\n\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async () => {\r\n          const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n\r\n                if (change.target === \"NewVersion\") {\r\n                  const sLatestID = await getLatestRevision(\r\n                    ItemId,\r\n                    ItemType,\r\n                    headers\r\n                  );\r\n                  if (realizedChanges.includes(sLatestID)) {\r\n                    ItemId = sLatestID;\r\n                  }\r\n                }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                  const mfgDetails = await getScopedItms(ItemId, headers);\r\n                  console.log(\"MFG Details are:\", mfgDetails);\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    const [ItemPlants, Iteminfo] = await Promise.all([\r\n                      getAssignedClasses(ItemId, headers),\r\n                      getItemDetails(ItemId, ItemType, headers),\r\n                    ]);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                    });\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n        };\r\n\r\n        // Run both functions in parallel\r\n        await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n\r\n        dispatch(setParentDetailsLoading(false));\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        dispatch(setCAHeaders(headers));\r\n      } else {\r\n        // Step 1: Fetch user group collaboration spaces\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        let allPlants = [];\r\n        if (allCollabSpaces.length > 0) {\r\n          allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n          console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        }\r\n\r\n        // Step 3: Fetch assigned plants if there are any\r\n        if (allPlants.length > 0) {\r\n          const plants = await fetchAssignedPlants(\r\n            allPlants,\r\n            headers,\r\n            objectId\r\n          );\r\n          console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n          if (plants.success) {\r\n            dispatch(setPlantObjectData(plants.data.plantData));\r\n            dispatch(setHeaders(headers));\r\n          } else {\r\n            console.error(\"Failed to fetch plant data.\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        }\r\n\r\n        // Step 4: Fetch Product Children based on type\r\n        let getProductChildren = {};\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = { success: true, data: [] };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          );\r\n        }\r\n\r\n        console.log(\"Type After:\", type);\r\n        console.log(\r\n          \"[Use Plant Assignment] Product Children:\",\r\n          getProductChildren\r\n        );\r\n\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers) {\r\n  const plantIdData = [];\r\n \r\n  const url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n \r\n    if (\r\n      itemResponse.output.member &&\r\n      itemResponse.output.member[0].ClassificationAttributes\r\n    ) {\r\n      itemResponse.output.member[0].ClassificationAttributes.member.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantId\")) {\r\n              plantName = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"ERPStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (plantName !== null) {\r\n            plantIdData.push({\r\n              PlantName: plantName,\r\n              PlantID: classId,\r\n              PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return plantIdData;\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\",\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      JSON.stringify(Body),\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of response.output.results) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nasync function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\nimport {GetFlowDownCADetails} from \"./getRouteDetails\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId // ProductId\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes.member;\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return GetFlowDownCADetails(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  let CADetails = {\"CAName\":\"\", \"CAStatus\":\"\"};\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n \r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\",\"ds6w:label\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n \r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n \r\n    const WAFData = await loadWAFData();\r\n \r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n \r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n \r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n \r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      if (response2.objectsByPatterns.caproposedwhere_from) {\r\n        await Promise.all(\r\n          response2.objectsByPatterns.caproposedwhere_from.map(async (itm) => {\r\n            const status = itm[\"ds6w:status\"].slice(14);\r\n            const CAName = itm[\"ds6w:label\"];\r\n            if (status !== \"Complete\") {\r\n              let url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,flowDown`;\r\n \r\n              const response3 = await new Promise((resolve, reject) => {\r\n                WAFData.authenticatedRequest(url3, {\r\n                  method: \"GET\",\r\n                  headers,\r\n                  type: \"json\",\r\n                  onComplete: resolve,\r\n                  onFailure: reject,\r\n                });\r\n              });\r\n \r\n              if (Array.isArray(response3.proposedChanges)) {\r\n                response3.proposedChanges.forEach((proposedChange) => {\r\n                  proposedChangesArray.push({\r\n                    identifier: proposedChange.where.identifier,\r\n                    action: proposedChange.whats[0].what,\r\n                  });\r\n                });\r\n              }\r\n \r\n              if (state.toLowerCase() === \"released\") {\r\n                resObejct = proposedChangesArray.some(\r\n                  (proposedChange) =>\r\n                    proposedChange.identifier === objectID &&\r\n                    proposedChange.action === \"Modify\"\r\n                );\r\n              } else {\r\n                resObejct = true;\r\n              }\r\n \r\n              if(resObejct){\r\n                CADetails[\"CAName\"] = CAName;\r\n                CADetails[\"CAStatus\"] = status;\r\n              }\r\n            }\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n \r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      CAData : CADetails,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n \r\n    throw error;\r\n  }\r\n};","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport { Card } from \"react-bootstrap\";\r\n \r\nconst usePlantDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            \"VPMReference\",\r\n            \"Document\",\r\n            \"Raw_Material\",\r\n            \"Change Action\",\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default usePlantDropableArea;","import useToast from \"../hooks/useToast\";\r\n\r\nimport api from \"../utils/api\"; // Import axios instance\r\nimport { MSG_REPLACE_SUCCESS, MSG_REPLACE_ERROR } from \"../utils/toastMessages\";\r\n\r\nconst useRevisions = () => {\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const fetchRevisionsAndParents = async (\r\n    objectId,\r\n    objectType,\r\n    relativePath\r\n  ) => {\r\n    if (!relativePath) {\r\n      console.error(\"[Fetch Revisions] ❌ Missing relative path.\");\r\n      return;\r\n    }\r\n\r\n    const parentURL = `/revFloat/getParents`;\r\n\r\n    try {\r\n      // Use the axios instance to make the POST request\r\n      const response = await api.post(parentURL, {\r\n        data: {\r\n          id: objectId,\r\n          type: objectType,\r\n          relativePath: relativePath,\r\n        },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const parentDetails = response.data;\r\n\r\n        // 🚀 Return data instead of dispatching\r\n        return parentDetails;\r\n      } else {\r\n        throw new Error(\r\n          `[Fetch Revisions] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Fetch Revisions] ❌ Error occurred:\", error);\r\n      return null; // Ensure it returns null on error\r\n    }\r\n  };\r\n\r\n  const replaceRevisions = async (selectedParents, droppedData, userEmail) => {\r\n    const parentURL = `/revFloat/floatRevisions`; // Use relative path for axios\r\n\r\n    try {\r\n      // Make the POST request to the replacement API\r\n      const response = await api.post(parentURL, {\r\n        SelectedParents: selectedParents,\r\n        DroppedData: droppedData,\r\n        userEmail: userEmail,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        // Handle successful replacement\r\n        console.log(\"Replacement successful:\", response.data);\r\n        showSuccessToast(MSG_REPLACE_SUCCESS); // Show success toast\r\n        // You might want to update the Redux store or refetch data here\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(\r\n          `[Replacement API] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during replacement:\", error);\r\n      showErrorToast(MSG_REPLACE_ERROR); // Show error toast\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  return { fetchRevisionsAndParents, replaceRevisions };\r\n};\r\n\r\nexport default useRevisions;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    progress = undefined,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      progress,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\n// New function that wraps useToast and adds progress\r\nconst useToastWithProgress = () => {\r\n  const { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast } = useToast();\r\n\r\n  const showToastWithProgress = (message, options = {}) => {\r\n    showToast({ message, progress: 1, ...options }); // Add progress property\r\n  };\r\n\r\n  const showSuccessToastWithProgress = (message, options = {}) => {\r\n    showSuccessToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showErrorToastWithProgress = (message, options = {}) => {\r\n    showErrorToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showInfoToastWithProgress = (message, options = {}) => {\r\n    showInfoToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showWarningToastWithProgress = (message, options = {}) => {\r\n    showWarningToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  return {\r\n    showToastWithProgress,\r\n    showSuccessToastWithProgress,\r\n    showErrorToastWithProgress,\r\n    showInfoToastWithProgress,\r\n    showWarningToastWithProgress,\r\n  };\r\n};\r\n\r\n// export { useToast, useToastWithProgress };\r\nexport default useToast;\r\nexport { useToastWithProgress };","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","export const refreshWidgetData = async (dataItems, handleDrop) => {\r\n  console.log(\"[refreshWidgetData] called with dataItems:\", dataItems);\r\n  if (!dataItems || dataItems.length === 0) {\r\n    console.warn(\"[Refresh] No dropped data available to refresh.\");\r\n    return;\r\n  }\r\n  try {\r\n    if (typeof handleDrop !== \"function\") {\r\n      throw new Error(\"[Refresh] handleDrop is not a function.\");\r\n    }\r\n    await handleDrop(dataItems);\r\n  } catch (error) {\r\n    console.error(\"[Refresh] Error during handleDrop execution:\", error);\r\n  }\r\n};\r\n"],"names":["_ref","variant","size","type","disabled","onClick","className","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","children","_jsx","src","alt","style","width","height","marginRight","data","isColumn","onDragStart","onDragEnd","titleRef","useRef","initialDraggedData","useSelector","state","droppedObject","droppedObjectData","useEffect","current","makeDraggable","concat","ref","border","owner","paddingLeft","_Fragment","EIN","Description","setIsColumn","useState","Card","Img","imageURL","CardBody","List","toggleFlexDirection","Image","widgetType","plantDroppable","usePlantDropableArea","bosDropable","useBOSDropableArea","defaultDroppable","useDroppableArea","initializeDroppableArea","hasInitializedDroppable","dispatch","useDispatch","isDragging","setIsDragging","DragAndDropStandAlone","CardComponent","handleDragStart","setDroppedObjectData","cardData","parentDetails","versions","setPlantObjectData","allPlants","initialAssignedPlants","uniquePlants","productChildren","CAName","headers","proposedChanges","CAData","setCAItemObjectDetails","CAItemDetails","CAallPlants","CAisMFGCA","CAheaders","handleDragEnd","Loader","onSearch","searchText","setSearchText","inputRef","FontAwesomeIcon","icon","faMagnifyingGlass","handleSearchIconClick","trim","InputGroup","Form","Control","value","onChange","event","newSearchText","target","onKeyDown","key","placeholder","handleClearClick","focus","header","columns","table","isFixed","column","id","isPinned","getState","columnPinning","left","includes","sortable","useSortable","attributes","listeners","setNodeRef","transform","opacity","position","top","CSS","Transform","toString","transition","getSize","zIndex","cursor","backgroundColor","getToggleSortingHandler","isPlaceholder","flexRender","columnDef","getContext","getIsSorted","onDoubleClick","resetSize","onMouseDown","getResizeHandler","onTouchStart","getIsResizing","cell","changedCells","getIsPinned","cellContent","columnName","split","slice","join","isChanged","getValue","color","fontWeight","getWidgetStorageKey","console","log","warn","editable","meta","latestRevision","droppedRevision","onSelectableRowsChange","tableData","setTableData","rowSelection","setRowSelection","lastSelectedId","setLastSelectedId","tableRef","isScrolled","setIsScrolled","handleScroll","e","scrollTop","tableContainer","addEventListener","removeEventListener","updateTableData","columnOrder","setColumnOrder","storageKey","storedOrder","localStorage","getItem","parsed","JSON","parse","every","colId","some","col","accessorKey","error","initialOrder","otherColumns","map","push","setItem","stringify","defaultColumnOrder","useMemo","initialColumnPinning","pinnedColumns","forEach","enhancedColumns","selectionColumn","_ref2","el","indeterminate","getIsSomeRowsSelected","checked","getIsAllRowsSelected","getToggleAllRowsSelectedHandler","_ref3","row","isSelectable","enableRowSelection","original","getIsSelected","getToggleSelectedHandler","_ref4","handleEditCell","rowIndex","columnId","updatedData","index","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","selectableRows","filter","IsLatest","useReactTable","onRowSelectionChange","onColumnOrderChange","getCoreRowModel","getSortedRowModel","defaultColumn","minSize","maxSize","columnResizeMode","selectedRows","getSelectedRowModel","flatRows","setSelectedTableRows","columnSizeVars","getFlatHeaders","colSizes","getTotalSize","i","length","columnSizingInfo","columnSizing","CustomButton","handleSelectAll","handleDeselectAll","handleExport","handleExportExcel","handleResetColumns","removeItem","DndContext","collisionDetection","closestCenter","modifiers","restrictToHorizontalAxis","active","over","prevOrder","oldIndex","indexOf","newIndex","arrayMove","getHeaderGroups","headerGroup","SortableContext","items","getVisibleLeafColumns","strategy","horizontalListSortingStrategy","DraggableColumnHeader","getRowModel","rows","handleRowClick","rowsById","shiftKey","rowsToToggle","getRowRange","isLastSelected","r","toggleSelected","getVisibleCells","DraggableCell","colSpan","useBOSWidget","showErrorToast","useToast","ENOVIA_BASE_URL","process","email","window","widget","handleBOSWidget","async","collabSpace","objectId","parentName","parentRevision","setParentDetailsLoading","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","baseURL","parentDirection","urlObjWAF","ChildObject","callEnoviaWebService","status","output","_response$data","_response$data$data","_response$data2","_response$data2$data","requestBody","getUrl","ChildObjectDocument","sSpec","dataelements","secondaryTitle","revision","stateNLS","name","revisionBody","child","body","identifier","source","relativePath","RevisionUrl","response","convertRevisionToNumber","rev","test","parseInt","number","charCodeAt","results","item","latestVersion","reduce","latest","doc","version","isLatestRevision","SpecName","SpecRevision","Items","obj","ItemName","ItemRevision","Specifications","fetchData","mergedData","spec","matchingDoc","find","childState","childTitle","childLatest","childName","childRevision","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","setSpecDocument","loading","setLoading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","success","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","objectType","Name","MSG_FETCH_OBJECT_DETAILS_FAILED","handleDrop","MSG_UNEXPECTED_ERROR","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","fetchRevisionsAndParents","useRevisions","isDropped","revisionParentData","Promise","all","_dataItems$3","MSG_INVALID_OBJECT_TYPE","setTimeout","useInterComSearch","socket","setSocket","InterCom","setInterCom","interComInstance","loadInterCom","loadData","disconnect","performSearch","searchOpts","onObjectsSelected","_window$widget","socketName","Date","toISOString","replace","newSocket","Socket","dispatchRetryInternal","subscribeServer","widgetId","finalSearchOpts","widget_id","app_socket_id","default_search_criteria","dispatchEvent","addListener","GetFlowDownCADetails","flowDownCA","CADetails","CAAtt","WAFData","loadWAFData","resolve","reject","authenticatedRequest","url","method","onComplete","onFailure","searchResponse","routeData","RouteID","RouteStatus","RouteURL","RouteDetails","ChangeData","MFGCAID","CAUrl","CAresponse","isFlowDownOf","EngCAUrl","EngCAResponse","CATitle","CAState","usePlantAssignment","handlePlantAssignment","ItemDetails","isMFGCA","fetchChangeActionData","CAURL","realizedChanges","realizedChange","where","changeProcessingPromises","ItemId","change","ItemType","sLatestID","revurl","ret","Body","result","ancestors","ancestor","getLatestRevision","mfgDetails","itemResponse","member","ScopeEngItem","getScopedItms","undefined","_Iteminfo$member$","_Iteminfo$member$$dse","ItemPlants","Iteminfo","getAssignedClasses","getItemDetails","ItemState","ItemTitle","ItemMBOM","EMR_hasMBOM","err","CAAllPlantsData","getAllPlants","setCAAllPlants","setCAItemDetails","setIsMFGCA","setCAHeaders","userGroupCollab","objectID","userGroup","userGroupBody","groups","sharings","userGroups","group","access","uri","userGroupID","grpUrl","grpresponse","members","getUserGroupCollab","allCollabSpaces","plants","libraryDataURL","initialAssignedClasses","uniqueInAllclasses","ClassExtensions","ClassificationAttributes","classItem","parentClass","ClassID","PlantName","promiseArray","Attributes","eachAttribute","then","flowDownCADetails","MCOTitle","MCOState","CA","allClass","assigned","plantData","fetchAssignedPlants","setHeaders","getProductChildren","expandDepth","type_filter_bo","type_filter_rel","Method","classifyBody","childs","toLowerCase","classesurl","classResponse","classIds","flatMap","_member$Classificatio","classification","classes","fetchProductChildren","setProductChildren","getCaDetails","resObejct","proposedChangesArray","URLCADetails","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","url2","bd","responseMode","ids","response2","objectsByPatterns","caproposedwhere_from","itm","url3","response3","Array","isArray","proposedChange","action","whats","what","fetchCADetails","setCAName","setProposedChanges","setCAData","plantIdData","classId","plantName","erpStatus","attribute","PlantID","PlantERPStatus","showSuccessToast","api","post","Error","replaceRevisions","selectedParents","droppedData","userEmail","SelectedParents","DroppedData","MSG_REPLACE_SUCCESS","MSG_REPLACE_ERROR","message","showToast","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","Bounce","progress","otherOptions","toast","options","arguments","showInfoToast","showWarningToast","useToastWithProgress","showToastWithProgress","showSuccessToastWithProgress","showErrorToastWithProgress","showInfoToastWithProgress","showWarningToastWithProgress","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","userClass","securityContext1","csrfURL","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue","refreshWidgetData"],"sourceRoot":""}