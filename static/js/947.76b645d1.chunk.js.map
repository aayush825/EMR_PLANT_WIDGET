{"version":3,"file":"static/js/947.76b645d1.chunk.js","mappings":"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","sources":["components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","hooks/usePlantDropableArea.js","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js"],"sourcesContent":["import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nconst usePlantDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        // const objectDetailsResult = await getDroppedObjectDetails({\r\n        //   dataItems,\r\n        // });\r\n        const objectDetailsResult = {\r\n          success: \"true\",\r\n          data: {\r\n            cardData: {\r\n              Type: \"Change Action\",\r\n              \"Maturity State\": \"In Work\",\r\n              Owner: \"Sudarshan Sambamurthy\",\r\n              \"Collaborative Space\": \"Micro Motion\",\r\n              \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n              \"Dropped Revision\": \"\",\r\n              \"Dropped Revision ID\": \"\",\r\n              \"Latest Released Revision\": \"\",\r\n              \"Latest Released Revision ID\": \"\",\r\n              EIN: \"\",\r\n              \"CAD Format\": \"\",\r\n              imageURL:\r\n                \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_ECM_CA108x144.png\",\r\n              relativePath:\r\n                \"/resources/v1/modeler/dslc/changeaction/474D00260AC21A0067CA9D1000015F59\",\r\n              Title: dataItems[0]?.displayName,\r\n              Name: dataItems[0]?.displayName,\r\n              organization: \"BU-0000001\",\r\n              \"Latest Revision\": \"-\",\r\n            },\r\n          },\r\n        };\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            \"VPMReference\",\r\n            \"Document\",\r\n            \"Raw_Material\",\r\n            \"Change Action\",\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default usePlantDropableArea;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type) => {\r\n  if (!tableData) return [];\r\n\r\n  return tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: \"Current\" || \"N/A\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || \"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || \"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      {\r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\" },\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      cell: ({ row, getValue, table }) => {\r\n        const handleDropdownChange = (e) => {\r\n          if (!CAName) return; // Prevent changes when disabled\r\n          const updatedValue = e.target.value;\r\n\r\n          // Update the table data state here\r\n          const updatedData = table\r\n            .getRowModel()\r\n            .rows.map((r) =>\r\n              r.id === row.id\r\n                ? { ...r.original, MBom: updatedValue }\r\n                : r.original\r\n            );\r\n\r\n          table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n        };\r\n\r\n        return (\r\n          <select\r\n            value={getValue()}\r\n            onChange={handleDropdownChange}\r\n            disabled={!CAName} // Disable dropdown if CAName is false\r\n            className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n            style={{\r\n              ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n              width: \"70%\",\r\n              padding: \"5px\",\r\n              fontSize: \"14px\",\r\n              color: \"#333\",\r\n              background: \"none\",\r\n              border: \"none\",\r\n              textAlign: \"left\",\r\n            }}\r\n            onMouseOver={(e) => {\r\n              if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n            }}\r\n            onMouseOut={(e) => {\r\n              if (CAName) e.target.style.border = \"none\";\r\n            }}\r\n          >\r\n            <option value=\"Make\">Make</option>\r\n            <option value=\"Buy\">Buy</option>\r\n          </select>\r\n        );\r\n      },\r\n    },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle Template\" },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [AddedItem, setAddedItem] = useState([]);\r\n  const [addedItemData, setAddedItemData] = useState([]);\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (onSave && CAName) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      // alert(\r\n      //   \"Change Action is required to update pLANTS, please assign Modify change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      // alert(\r\n      //   \"Change Action is required to update, please assign change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  // useEffect(() => {\r\n  //   onAddPlant(addedItemData);\r\n  //   console.log(\"Data Passed\");\r\n  //   // addedPlant(AddedItem);\r\n  // }, [addedItemData]);\r\n\r\nconst handleMECO = () => {\r\n\r\n  \r\n};\r\n\r\n\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    setAddedItem(data);\r\n    if (data.length > 0) {\r\n      const newItems = data.map((title) => ({\r\n        title: title, // Use the title as Plant (or replace with actual data)\r\n        Seq: \"1\",\r\n        Status: \"Current\",\r\n        \"MFG Change\": \"N/A\",\r\n        \"MFG Status\": \"N/A\",\r\n        Change: \"N/A\",\r\n        \"Change Status\": \"N/A\",\r\n        \"Oracle Template\": \"N/A\",\r\n        \"ERP Status\": \"Active\",\r\n        \"ERP Export\": \"Yes\",\r\n        \"Lead Plant\": \"false\",\r\n        MBom: \"Buy\",\r\n        \"Sort Value\": \"\",\r\n      }));\r\n      onAddPlant(newItems);\r\n      setAddedItemData(newItems);\r\n      addedPlant(data);\r\n    }\r\n  };\r\n  // useEffect(() => {\r\n  //   // if (AddedItem.length > 0) {\r\n  //   //   const newItems = AddedItem.map((title) => ({\r\n  //   //     title: title, // Use the title as Plant (or replace with actual data)\r\n  //   //     Seq: \"1\",\r\n  //   //     Status: \"Current\",\r\n  //   //     MFG_Change: \"\",\r\n  //   //     MFG_Status: \"\",\r\n  //   //     Change: \"\",\r\n  //   //     Change_Status: \"\",\r\n  //   //     Oracle_Template: \"\",\r\n  //   //     \"ERP Status\": \"Active\",\r\n  //   //     \"ERP Export\": \"Yes\",\r\n  //   //     \"Lead Plant\": \"false\",\r\n  //   //     MBom: \"Buy\",\r\n  //   //     \"Sort Value\": \"\",\r\n  //   //   }));\r\n  //   //   onAddPlant(newItems);\r\n  //   //   setAddedItemData(newItems);\r\n  //   //   addedPlant(AddedItem);\r\n  //   // }\r\n  // }, [AddedItem]);\r\n\r\n  console.log(\"Added item data:\", addedItemData);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={() => {\r\n            if (CAName) {\r\n              setAddPlantPopup(true); // Open the modal if CAName is present\r\n            } else if (state === \"RELEASED\") {\r\n              showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n            } else {\r\n              showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n            }\r\n          }}\r\n        >\r\n          Add Plant\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={handleSaveClick}\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n\r\n        <button\r\n          className=\"btn btn-outline-primary btn-lg m-2\"\r\n          onClick={handleMECO}\r\n        >\r\n          MECO\r\n        </button>\r\n      </div>\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata}\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport { clearAllListeners } from \"@reduxjs/toolkit\";\r\nimport { faClipboardQuestion } from \"@fortawesome/free-solid-svg-icons\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\n//import { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\n\r\nconst fetchData = async (url, body = null, method = \"GET\", headers = {}) => {\r\n  console.log(\"Fetching URL:\", url);\r\n  console.log(\"Method is:\", method);\r\n  if (body) {\r\n    console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n  }\r\n\r\n  try {\r\n    const response = await axios({\r\n      url,\r\n      method,\r\n      headers: {\r\n        ...headers,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: body, // Include body only if provided\r\n    });\r\n\r\n    console.log(\"Response received:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Request failed:\", error.response?.data || error.message);\r\n    throw error; // Propagate the error to the caller\r\n  }\r\n};\r\n\r\nconst PlantAssignment = () => {\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [addedDataFromToolbar, setAddedDataFromToolbar] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n    await onSave(tableData); // Pass tableData when calling onSave\r\n  };\r\n  const handleRemove = async () => {\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode(true); // Keeps remove mode active\r\n    } else {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n      if (selectedTableRows.length > 0) {\r\n        // Extract IDs or titles of selected rows\r\n        const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n        console.log(\"Selected Titles:\", selectedTitles);\r\n        const removedTitles = selectedTitles.map((title) => ({\r\n          title: title,\r\n        }));\r\n        console.log(\"Removed Titles:\", removedTitles);\r\n        const updatedTableData = tableData.filter(\r\n          (row) => !selectedTitles.includes(row.Plant)\r\n        );\r\n        console.log(\"updateTableData\", updateTableData);\r\n        if (updateTableData) {\r\n          setTableData(updatedTableData);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n        }\r\n\r\n        // // Update state\r\n\r\n        setUniqueData((prevUniquePlants) => [\r\n          ...prevUniquePlants,\r\n          ...removedTitles,\r\n        ]); // Add removed items back to uniqueData\r\n      } else {\r\n        alert(\"Please select at least one row to remove.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.filter(\r\n                  (plant) => plant.PlantID !== plantId\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n  const handleAdded = (data) => {\r\n    console.log(\"Data Received\");\r\n    setAddedDataFromToolbar(data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    setTableData((prev) => [\r\n      ...data.map(({ title, ...rest }) => ({ Plant: title, ...rest })),\r\n      ...prev,\r\n    ]);\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n  };\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // NGetting the CA dETAILS FROM rEDUX\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n  useEffect(() => {\r\n    setUniqueData(uniquePlant);\r\n  }, [uniquePlant]);\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n          closeOnClick: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type)\r\n      : getTableData(assignedPlant, type);\r\n  }, [CAItemDetailsTable, assignedPlant, type]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n  // Extract plant data whenever tableData changes\r\n  useEffect(() => {\r\n    extractPlantData(tableData); // Call the function with tableData\r\n  }, [tableData]);\r\n  // useEffect(() => {\r\n  //   if (addedDataFromToolbar.length > 0) {\r\n  //     console.log(\"[Plant Assignment] Table data\", tableData);\r\n  //     console.log(\"Added Data from Toolbar\", addedDataFromToolbar);\r\n  //     setAssignedPlant((prev) => [...addedDataFromToolbar, ...prev]);\r\n  //     setTableKey((prevKey) => prevKey + 1); // Update table key\r\n  //   }\r\n  // }, [addedDataFromToolbar]);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleFileChange = async (event) => {\r\n    console.log(\"[handleFileChange] Function triggered\");\r\n\r\n    const headers = await fetchCsrfToken();\r\n    console.log(\"handlefile change Headers:\", headers);\r\n\r\n    // Create the manufacturing CA body\r\n\r\n    // const allPlantsData = await getAllPlants(\r\n    //   ['Micro Motion'],\r\n    //   headers,\r\n    //   \"\"\r\n    // ); // getAllPlants wants collabspace as an array.\r\n    //  console.log(\"Parallel API response:\", allPlantsData);\r\n    const allPlants = [\r\n      {\r\n        id: \"B56EF85DED292C0066E35FC2000136B3\",\r\n        name: \"Class-OI000186152-00000133\",\r\n        title: \"Plant MVO\",\r\n        classUsage: \"Definition\",\r\n        description: \"Master Validation Org - Oracle\",\r\n        type: \"General Class\",\r\n        state: \"Active\",\r\n        modified: \"3/26/2025 2:07:16 PM\",\r\n        created: \"9/12/2024 9:40:48 PM\",\r\n        revision: \"-\",\r\n        owner: \"Cornel Gazdaru\",\r\n        organization: \"Company Name\",\r\n        collabspace: \"Micro Motion\",\r\n      },\r\n      {\r\n        id: \"B56EF85DED292C0066E35FEE000136B5\",\r\n        name: \"Class-OI000186152-00000134\",\r\n        title: \"Plant MMB\",\r\n        classUsage: \"Definition\",\r\n        description: \"Boulder Factory - Oracle\",\r\n        type: \"General Class\",\r\n        state: \"Active\",\r\n        modified: \"3/26/2025 2:07:20 PM\",\r\n        created: \"9/12/2024 9:41:35 PM\",\r\n        revision: \"-\",\r\n        owner: \"Cornel Gazdaru\",\r\n        organization: \"Company Name\",\r\n        collabspace: \"Micro Motion\",\r\n      },\r\n      {\r\n        id: \"B56EF85DED292C0066E36019000136B7\",\r\n        name: \"Class-OI000186152-00000135\",\r\n        title: \"Plant MMC\",\r\n        classUsage: \"Definition\",\r\n        description: \"Chihuahua Factory - Oracle\",\r\n        type: \"General Class\",\r\n        state: \"Active\",\r\n        modified: \"3/26/2025 6:57:08 AM\",\r\n        created: \"9/12/2024 9:42:07 PM\",\r\n        revision: \"-\",\r\n        owner: \"Cornel Gazdaru\",\r\n        organization: \"Company Name\",\r\n        collabspace: \"Micro Motion\",\r\n      },\r\n    ];\r\n\r\n    console.log(\r\n      \"[handleFileChange] allPlants data handlefile change:\",\r\n      allPlants\r\n    );\r\n\r\n    if (Array.isArray(allPlants)) {\r\n      const plantTitles = allPlants.map((plant) => plant.title);\r\n      console.log(\"[handleFileChange] Extracted Plant Titles:\", plantTitles);\r\n    } else {\r\n      console.log(\r\n        \"[handleFileChange] allPlants is not an array or is undefined\"\r\n      );\r\n    }\r\n\r\n    const files = event.target.files;\r\n    const validExtensions = [\r\n      \"application/vnd.ms-excel\",\r\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n    ]; // MIME types for .xls and .xlsx\r\n\r\n    // Check if all files are valid Excel files\r\n    const invalidFiles = Array.from(files).filter(\r\n      (file) =>\r\n        !validExtensions.includes(file.type) &&\r\n        !file.name.toLowerCase().endsWith(\".xls\") &&\r\n        !file.name.toLowerCase().endsWith(\".xlsx\")\r\n    );\r\n\r\n    if (invalidFiles.length > 0) {\r\n      showErrorToast(\"Only Excel files (.xls, .xlsx) can be uploaded\");\r\n      event.target.value = \"\"; // Reset the file input\r\n      return;\r\n    }\r\n\r\n    const file = files[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = async (e) => {\r\n      const data = new Uint8Array(e.target.result);\r\n      const workbook = XLSX.read(data, { type: \"array\" });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const sheet = workbook.Sheets[sheetName];\r\n      const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Get data as a 2D array\r\n\r\n      console.log(\"Parsed Excel Data:\", jsonData);\r\n\r\n      // Validation: Check if the file is empty\r\n      if (jsonData.length === 0) {\r\n        showErrorToast(\"File is empty\");\r\n        return;\r\n      }\r\n      const manufacturingCABody = createManufacturingCABody(\r\n        jsonData,\r\n        allPlants\r\n      );\r\n      console.log(\r\n        \"[handleFileChange] Manufacturing CA Body:\",\r\n        manufacturingCABody\r\n      );\r\n\r\n      // Pass headers to callManufacturingCAApi\r\n      const response = await callManufacturingCAApi(\r\n        manufacturingCABody,\r\n        headers\r\n      );\r\n      console.log(\r\n        \"[handleFileChange] Manufacturing CA API Response:\",\r\n        response\r\n      );\r\n\r\n      // Validation: Check if headers match \"Item\" and \"Plants\"\r\n      const normalizedHeaders = jsonData[0].map((header) =>\r\n        header?.toString().trim().toLowerCase()\r\n      ); // Normalize headers\r\n      console.log(\"Normalized Headers:\", normalizedHeaders);\r\n\r\n      if (\r\n        normalizedHeaders[0] !== \"item\" ||\r\n        normalizedHeaders[1] !== \"plants\"\r\n      ) {\r\n        showErrorToast(\r\n          \"File headers are incorrect. Expected headers: 'Item' and 'Plants'\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      // const allPlantsData = await getAllPlants([\"Micro Motion\"], headers, \"\");\r\n      // console.log(\"[PlantAssignment] All Plants Data:\", allPlantsData);\r\n\r\n      //Extract titles from allPlants and remove \"Plant \" prefix\r\n      // const validPlantTitles = allPlantsData.map((plant) =>\r\n      //   plant.title.replace(\"Plant \", \"\").trim()\r\n      // );\r\n      const validPlantTitles = allPlants.map((plant) =>\r\n        plant.title.replace(\"Plant \", \"\").trim()\r\n      );\r\n      console.log(\"Valid Plant Titles:\", validPlantTitles);\r\n\r\n      // Validation: Check for missing values in rows\r\n      const errors = [];\r\n      for (let i = 1; i < jsonData.length; i++) {\r\n        const row = jsonData[i];\r\n        const item = row[0];\r\n        const plants = row[1];\r\n\r\n        if (!item && plants) {\r\n          errors.push({\r\n            rowNumber: i + 1,\r\n            columnName: \"Item\",\r\n            errorDescription: \"Items can't be empty\",\r\n          });\r\n        }\r\n\r\n        if (item && !plants) {\r\n          errors.push({\r\n            rowNumber: i + 1,\r\n            columnName: \"Plants\",\r\n            errorDescription: \"Plants value is missing\",\r\n          });\r\n        }\r\n\r\n        // Check for invalid plant values\r\n        if (plants) {\r\n          const plantValues = plants.split(\",\").map((plant) => plant.trim()); // Split and trim plant values\r\n          console.log(`Row ${i + 1} Plant Values:`, plantValues);\r\n\r\n          plantValues.forEach((plant) => {\r\n            if (!validPlantTitles.includes(plant)) {\r\n              errors.push({\r\n                rowNumber: i + 1,\r\n                columnName: \"Plants\",\r\n                errorDescription: `Invalid plant value: ${plant}`,\r\n              });\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      console.log(\"Validation Errors:\", errors);\r\n\r\n      if (errors.length > 0) {\r\n        // Transform errors into the expected format for ErrorPopup.jsx\r\n        const formattedErrors = errors.map(\r\n          (error) =>\r\n            `Row ${error.rowNumber}: \"${error.columnName}\" value ${error.errorDescription}`\r\n        );\r\n\r\n        console.log(\"[plantAssignment.jsx] Formatted Errors:\", formattedErrors);\r\n\r\n        // Pass formatted errors to ContentErrorsModal\r\n        setValidationErrors(formattedErrors);\r\n        setShowErrorsModal(true);\r\n      } else {\r\n        showSuccessToast(\"File uploaded successfully with no errors\");\r\n\r\n        // Create the manufacturing CA body\r\n        // const manufacturingCABody = createManufacturingCABody(jsonData, allPlants);\r\n        // console.log(\r\n        //   \"[handleFileChange] Manufacturing CA Body:\",\r\n        //   manufacturingCABody\r\n        // );\r\n\r\n        // const response = await callManufacturingCAApi(manufacturingCABody);\r\n        // console.log(\r\n        //   \"[handleFileChange] Manufacturing CA API Response:\",\r\n        //   response\r\n        // );\r\n      }\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      showErrorToast(\"Failed to read the file. Please try again.\");\r\n    };\r\n\r\n    reader.readAsArrayBuffer(file);\r\n  };\r\n\r\n  // Function to create the manufacturing CA body from Excel data and allPlants\r\n  const createManufacturingCABody = (excelData, allPlantsData) => {\r\n    const items = [];\r\n    const uniquePlantTitles = new Set();\r\n\r\n    for (let i = 1; i < excelData.length; i++) {\r\n      const row = excelData[i];\r\n      if (row.length >= 2 && row[0] && row[1]) {\r\n        const itemName = row[0].toString().trim();\r\n        const plantsList = row[1].toString().includes(\",\")\r\n          ? row[1]\r\n              .toString()\r\n              .split(\",\")\r\n              .map((p) => p.trim())\r\n          : [row[1].toString().trim()];\r\n        items.push({\r\n          name: itemName,\r\n          plants: plantsList,\r\n        });\r\n        plantsList.forEach((plant) => uniquePlantTitles.add(plant));\r\n      }\r\n    }\r\n\r\n    const parentPlants = [];\r\n    uniquePlantTitles.forEach((plantTitle) => {\r\n      const matchedPlant = allPlantsData.find((plant) => {\r\n        const normalizedTitle = plant.title.replace(/^Plant\\s+/, \"\");\r\n        return normalizedTitle === plantTitle || plant.title === plantTitle;\r\n      });\r\n      if (matchedPlant) {\r\n        parentPlants.push({\r\n          PlantName: matchedPlant.title.replace(/^Plant\\s+/, \"\"),\r\n          PlantID: matchedPlant.id,\r\n        });\r\n      }\r\n    });\r\n\r\n    const samplePlant = allPlantsData.length > 0 ? allPlantsData[0] : null;\r\n\r\n    return {\r\n      CAName: \"TEMPKP22\",\r\n      CAOrganization: samplePlant?.organization,\r\n      CACollabSpace: samplePlant?.collabspace,\r\n      CADescription: samplePlant?.description,\r\n      CASeverity: \"Low\",\r\n      CAOwner: samplePlant?.owner,\r\n      Items: items,\r\n      ParentPlants: parentPlants,\r\n    };\r\n  };\r\n\r\n  // Function to make the API call\r\n  const callManufacturingCAApi = async (body, headers) => {\r\n    const manufacturingCAUrl = \"https://jsonplaceholder.typicode.com/posts\";\r\n\r\n    console.log(\"Headers for Manufacturing CA API:\", headers);\r\n\r\n    const response = await fetchData(manufacturingCAUrl, body, \"POST\", headers);\r\n    console.log(\"Manufacturing CA Response:\", JSON.stringify(response));\r\n    return response;\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (selectedFiles) {\r\n      console.log(\"Files submitted:\", selectedFiles);\r\n      // Add your submit logic here\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          <div\r\n            style={{\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Form.Group controlId=\"formFileMultiple\">\r\n              <Form.Control type=\"file\" multiple onChange={handleFileChange} />\r\n            </Form.Group>\r\n\r\n            <Button\r\n              variant=\"outline-primary\"\r\n              onClick={handleSubmit}\r\n              style={{\r\n                cursor: !selectedFiles ? \"not-allowed\" : \"pointer\",\r\n                opacity: !selectedFiles ? 0.5 : 1, // Optional: makes the button look disabled\r\n              }}\r\n            >\r\n              Create Manufacturing CA\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && <CardWithDragAndDrop data={cardData} />}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  data={tableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["_ref","variant","message","show","className","_jsx","Alert","children","onHide","title","footerButtons","_jsxs","Modal","size","centered","Header","closeButton","Title","Body","Footer","map","btn","index","Button","onClick","label","errors","processedErrors","useMemo","errorGroups","reduce","groups","error","rowMatch","match","columnMatch","errorMsg","split","slice","join","rowNumber","columnName","includes","columns","push","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","style","parent","CellMeasurer","columnIndex","rowIndex","width","column","i","err","ReusableAlert","_Fragment","length","AutoSizer","_ref3","height","List","rowCount","rowHeight","deferredMeasurementCache","console","log","CustomModal","ErrorPopup","usePlantDropableArea","showErrorToast","useToast","handlePlantAssignment","usePlantAssignment","isDropped","useSelector","state","droppedObject","loading","dispatch","useDispatch","fetchObjectDetails","useCallback","async","_dataItems$","_dataItems$2","objectDetailsResult","success","data","cardData","Type","Owner","EIN","imageURL","relativePath","dataItems","displayName","Name","organization","setDroppedObjectData","draggedObjectData","_dataItems$3","_dataItems$4","setIsDroppedAction","objectId","objectType","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","_dataItems$5","MSG_INVALID_OBJECT_TYPE","setTimeout","warn","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","WidgetLifecycle","showSuccessToast","useState","useEffect","window","widget","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","some","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","PlantRenderer","plants","itemId","isRemoveMode","handleRemovePlant","plant","marginRight","display","alignItems","PlantName","AiOutlineClose","cursor","color","PlantID","getTableData","tableData","type","ItemName","ItemTitle","Plant","ItemPlants","ItemId","Seq","Status","MFGChange","MFGStatus","Change","ChangeStatus","OracleTemplate","MBom","MBOM","uniqueColumns","accessorKey","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","CAName","showWarningToast","AddedItem","setAddedItem","addedItemData","setAddedItemData","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","handleMECO","_availablePlantRef$cu","current","addPlant","AvailablePlant","ref","addedItem","newItems","DragAndDropComponent","performSearch","useInterComSearch","Image","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","id","PlantAssignment","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","addedDataFromToolbar","setAddedDataFromToolbar","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","plantId","item","_objectSpread","filter","extractPlantData","plantData","row","itemName","plantName","selectedTableRows","CAItemDetails","loadingParentDetails","proposedChanges","plantObjectData","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","headers","updateTableData","updatedData","prevKey","_droppedObjectData$in","_droppedObjectData$in2","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in3","_droppedObjectData$in4","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","forEach","tableItem","_allPlants$find","finalObj","replace","classid","find","classitem","test","concat","MBOMName","MBOMValue","initialClass","_allPlants$find2","classObject","rowstoDelete","_allPlants$find3","classItem","result","saveData","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","trim","userSelect","position","paddingRight","handleCopy","textToCopy","navigator","clipboard","writeText","right","top","background","border","fontSize","FaRegCopy","formattedFinalMessage","autoClose","closeOnClick","finalobj","ErrorObj","keys","response","errorObj","processErrorObj","MSG_SAVE_FAILURE","newTableData","uniqueTableData","getUniqueTableData","owner","Description","getCardData","tableColumns","cell","original","getValue","table","value","onChange","e","_table$options$meta","updatedValue","target","getRowModel","rows","r","options","meta","disabled","appearance","padding","textAlign","onMouseOver","onMouseOut","createManufacturingCABody","excelData","allPlantsData","uniquePlantTitles","Set","toString","plantsList","p","name","add","parentPlants","plantTitle","matchedPlant","samplePlant","CAOrganization","CACollabSpace","collabspace","CADescription","description","CASeverity","CAOwner","Items","ParentPlants","callManufacturingCAApi","body","url","arguments","undefined","method","JSON","stringify","axios","_error$response","fetchData","flexDirection","justifyContent","bottom","left","transform","zIndex","gap","Form","Group","controlId","Control","multiple","fetchCsrfToken","classUsage","modified","created","revision","Array","isArray","plantTitles","files","event","validExtensions","invalidFiles","from","file","toLowerCase","endsWith","reader","FileReader","onload","Uint8Array","workbook","XLSX","sheetName","SheetNames","sheet","Sheets","jsonData","sheet_to_json","manufacturingCABody","normalizedHeaders","validPlantTitles","errorDescription","plantValues","formattedErrors","onerror","readAsArrayBuffer","handleSubmit","opacity","handleHomeClick","setIsDropped","parentDetails","versions","setPlantObjectData","CardWithDragAndDrop","PlantAssignmentToolbarNativeCta","prev","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","selectedTitles","removedTitles","prevUniquePlants","alert","ReusableTable","widgetType","ContentErrorsModal","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}